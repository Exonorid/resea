--
--  The Wireshark dissector for Resea IPC messages.
--
--  Setup:
--
--    1. Install Wireshark
--    2. Install this dissector (in macOS, copy this file to ~/.config/wireshark/plugins/)
--    3. Open Prefrences > Protocols > DLT_USER > Encapsulations Table
--    4. Add a new rule: DLT="User 0 (DLT=147)", Payload protocol="resea", Header/Trailer size=0
--       (see https://wiki.wireshark.org/HowToDissectAnything)
--
--  How to use:
--
--    $ make run | tee boot.log
--    $ grep "pcap>" boot.log > messages.log
--    $ text2pcap -l 147 messages.log messages.pcap
--    $ wireshark messages.pcap
--
proto = Proto("resea", "Resea IPC Messages")

function main()
    local optional_payloads = { [0] = "Not included", [1] = "Included" }

    proto.fields.source =
        ProtoField.string("resea.source", "Source")
    proto.fields.dest =
        ProtoField.string("resea.source", "Destination")
    proto.fields.inline_len =
        ProtoField.uint8("resea.inline_len", "Inline Payload Length", base.DEC)
    proto.fields.interface =
        ProtoField.uint8("resea.interface", "Interface ID", base.DEC)
    proto.fields.message_type =
        ProtoField.uint16("resea.message_type", "Message Type", base.HEX,
            message_types)
    proto.fields.page_included =
        ProtoField.uint8("resea.page_included", "Page Payload", base.HEX,
            optional_payloads, 0x08)
    proto.fields.channel_included =
        ProtoField.uint8("resea.channel_included", "Channel Payload", base.HEX,
            optional_payloads, 0x10)

    function proto.dissector(buffer, pinfo, tree)
        function msg(start, end_)
            if start == nil then
                start = 0
            end

            return buffer (72 + start, end_)
        end

        pinfo.cols.protocol = "Resea"
        subtree = tree:add(proto, msg(), message)

        --
        -- Packet Header
        --
        source = "@" .. buffer(0, 32):stringz() .. "." .. buffer(64, 4):le_uint()
        dest = "@" .. buffer(32, 32):stringz() .. "." .. buffer(68, 4):le_uint()
        subtree:add(proto.fields.source, source)
        subtree:add(proto.fields.dest, dest)
        pinfo.cols.src = source;
        pinfo.cols.dst = dest;

        --
        --  Message Header
        --
        local inline_len = msg(0, 1):le_uint()
        header = subtree:add(msg(0, 4), "Header")
        header:add_le(proto.fields.interface, msg(3, 1))
        header:add_le(proto.fields.message_type,  msg(2, 2))
        header:add_le(proto.fields.inline_len, inline_len)
        header:add_le(proto.fields.page_included, msg(1, 1))
        header:add_le(proto.fields.channel_included, msg(1, 1))

        local message_type = msg(2, 2):le_uint()
        local message = resea_messages[message_type]
        if message == nil then
            -- Unknown message
            pinfo.cols.info = "(unknown message)"
            return
        end
        pinfo.cols.info = message["name"]

        --
        --  Payloads
        --
        fields = subtree:add(msg(5), "Payloads")
        for _, field in ipairs(message["fields"]) do
            fields:add_le(field["proto"], msg(field["offset"], field["len"]))
        end


        --
        --  Set colors
        --
        set_color_filter_slot(1, "resea.interface == 12")  -- discovery
        set_color_filter_slot(2, "resea.interface == 10") -- kernel
        set_color_filter_slot(3, "resea.interface == 4")  -- pager
        set_color_filter_slot(4, "resea.interface == 11")  -- memmgr
        set_color_filter_slot(6, "resea.interface == 14 || resea.interface == 15")  -- net / net_client
        set_color_filter_slot(7, "resea.interface == 6")  -- fs
        set_color_filter_slot(8, "30 <= resea.interface && resea.interface <= 50") -- device drivers
        set_color_filter_slot(10, "resea.interface == 2")  -- runtime
        set_color_filter_slot(10, "resea.interface == 5")  -- timer
    end

    wtap_encap = DissectorTable.get("wtap_encap")
    wtap_encap:add(wtap.USER0, proto)
end

main()

-- -----------------------------------------------------------------------------
-- Message definitions generated by generate-wireshark-dissector-data.py
--


proto.fields.runtime_exit_code = ProtoField.int32("resea.payloads.runtime.exit.code", "code" , base.DEC);
proto.fields.runtime_printchar_ch = ProtoField.string("resea.payloads.runtime.printchar.ch", "ch" );
proto.fields.runtime_print_str_str = ProtoField.string("resea.payloads.runtime.print_str.str", "str" );
proto.fields.server_connect_interface = ProtoField.uint8("resea.payloads.server.connect.interface", "interface" , base.DEC);
proto.fields.pager_fill_proc = ProtoField.int32("resea.payloads.pager.fill.proc", "proc" , base.DEC);
proto.fields.pager_fill_addr = ProtoField.uint64("resea.payloads.pager.fill.addr", "addr" , base.HEX);
proto.fields.pager_fill_num_pages = ProtoField.uint64("resea.payloads.pager.fill.num_pages", "num_pages" , base.HEX);
proto.fields.timer_create_initial = ProtoField.int32("resea.payloads.timer.create.initial", "initial" , base.DEC);
proto.fields.timer_create_interval = ProtoField.int32("resea.payloads.timer.create.interval", "interval" , base.DEC);
proto.fields.timer_reset_timer = ProtoField.int32("resea.payloads.timer.reset.timer", "timer" , base.DEC);
proto.fields.timer_reset_initial = ProtoField.int32("resea.payloads.timer.reset.initial", "initial" , base.DEC);
proto.fields.timer_reset_interval = ProtoField.int32("resea.payloads.timer.reset.interval", "interval" , base.DEC);
proto.fields.timer_clear_timer = ProtoField.int32("resea.payloads.timer.clear.timer", "timer" , base.DEC);
proto.fields.kernel_create_process_name = ProtoField.string("resea.payloads.kernel.create_process.name", "name" );
proto.fields.kernel_destroy_process_proc = ProtoField.int32("resea.payloads.kernel.destroy_process.proc", "proc" , base.DEC);
proto.fields.kernel_add_vm_area_proc = ProtoField.int32("resea.payloads.kernel.add_vm_area.proc", "proc" , base.DEC);
proto.fields.kernel_add_vm_area_start = ProtoField.uint64("resea.payloads.kernel.add_vm_area.start", "start" , base.HEX);
proto.fields.kernel_add_vm_area_size = ProtoField.uint64("resea.payloads.kernel.add_vm_area.size", "size" , base.HEX);
proto.fields.kernel_add_vm_area_flags = ProtoField.uint8("resea.payloads.kernel.add_vm_area.flags", "flags" , base.DEC);
proto.fields.kernel_inject_channel_proc = ProtoField.int32("resea.payloads.kernel.inject_channel.proc", "proc" , base.DEC);
proto.fields.kernel_spawn_thread_proc = ProtoField.int32("resea.payloads.kernel.spawn_thread.proc", "proc" , base.DEC);
proto.fields.kernel_spawn_thread_start = ProtoField.uint64("resea.payloads.kernel.spawn_thread.start", "start" , base.HEX);
proto.fields.kernel_spawn_thread_stack = ProtoField.uint64("resea.payloads.kernel.spawn_thread.stack", "stack" , base.HEX);
proto.fields.kernel_spawn_thread_buffer = ProtoField.uint64("resea.payloads.kernel.spawn_thread.buffer", "buffer" , base.HEX);
proto.fields.kernel_spawn_thread_arg = ProtoField.uint64("resea.payloads.kernel.spawn_thread.arg", "arg" , base.HEX);
proto.fields.kernel_destroy_thread_thread = ProtoField.int32("resea.payloads.kernel.destroy_thread.thread", "thread" , base.DEC);
proto.fields.kernel_listen_irq_irq = ProtoField.uint8("resea.payloads.kernel.listen_irq.irq", "irq" , base.DEC);
proto.fields.kernel_read_ioport_addr = ProtoField.uint64("resea.payloads.kernel.read_ioport.addr", "addr" , base.DEC);
proto.fields.kernel_read_ioport_size = ProtoField.uint64("resea.payloads.kernel.read_ioport.size", "size" , base.HEX);
proto.fields.kernel_write_ioport_addr = ProtoField.uint64("resea.payloads.kernel.write_ioport.addr", "addr" , base.DEC);
proto.fields.kernel_write_ioport_size = ProtoField.uint64("resea.payloads.kernel.write_ioport.size", "size" , base.HEX);
proto.fields.kernel_write_ioport_data = ProtoField.uint64("resea.payloads.kernel.write_ioport.data", "data" , base.DEC);
proto.fields.kernel_batch_write_ioport_addr1 = ProtoField.uint64("resea.payloads.kernel.batch_write_ioport.addr1", "addr1" , base.DEC);
proto.fields.kernel_batch_write_ioport_size1 = ProtoField.uint64("resea.payloads.kernel.batch_write_ioport.size1", "size1" , base.HEX);
proto.fields.kernel_batch_write_ioport_data1 = ProtoField.uint64("resea.payloads.kernel.batch_write_ioport.data1", "data1" , base.DEC);
proto.fields.kernel_batch_write_ioport_addr2 = ProtoField.uint64("resea.payloads.kernel.batch_write_ioport.addr2", "addr2" , base.DEC);
proto.fields.kernel_batch_write_ioport_size2 = ProtoField.uint64("resea.payloads.kernel.batch_write_ioport.size2", "size2" , base.HEX);
proto.fields.kernel_batch_write_ioport_data2 = ProtoField.uint64("resea.payloads.kernel.batch_write_ioport.data2", "data2" , base.DEC);
proto.fields.kernel_batch_write_ioport_addr3 = ProtoField.uint64("resea.payloads.kernel.batch_write_ioport.addr3", "addr3" , base.DEC);
proto.fields.kernel_batch_write_ioport_size3 = ProtoField.uint64("resea.payloads.kernel.batch_write_ioport.size3", "size3" , base.HEX);
proto.fields.kernel_batch_write_ioport_data3 = ProtoField.uint64("resea.payloads.kernel.batch_write_ioport.data3", "data3" , base.DEC);
proto.fields.kernel_batch_write_ioport_addr4 = ProtoField.uint64("resea.payloads.kernel.batch_write_ioport.addr4", "addr4" , base.DEC);
proto.fields.kernel_batch_write_ioport_size4 = ProtoField.uint64("resea.payloads.kernel.batch_write_ioport.size4", "size4" , base.HEX);
proto.fields.kernel_batch_write_ioport_data4 = ProtoField.uint64("resea.payloads.kernel.batch_write_ioport.data4", "data4" , base.DEC);
proto.fields.memmgr_alloc_pages_num_pages = ProtoField.uint64("resea.payloads.memmgr.alloc_pages.num_pages", "num_pages" , base.HEX);
proto.fields.memmgr_alloc_phy_pages_num_pages = ProtoField.uint64("resea.payloads.memmgr.alloc_phy_pages.num_pages", "num_pages" , base.HEX);
proto.fields.memmgr_map_phy_pages_paddr = ProtoField.uint64("resea.payloads.memmgr.map_phy_pages.paddr", "paddr" , base.HEX);
proto.fields.memmgr_map_phy_pages_num_pages = ProtoField.uint64("resea.payloads.memmgr.map_phy_pages.num_pages", "num_pages" , base.HEX);
proto.fields.discovery_connect_interface = ProtoField.uint8("resea.payloads.discovery.connect.interface", "interface" , base.DEC);
proto.fields.discovery_publish_interface = ProtoField.uint8("resea.payloads.discovery.publish.interface", "interface" , base.DEC);
proto.fields.fs_open_path = ProtoField.string("resea.payloads.fs.open.path", "path" );
proto.fields.fs_close_handle = ProtoField.int32("resea.payloads.fs.close.handle", "handle" , base.DEC);
proto.fields.fs_read_file = ProtoField.int32("resea.payloads.fs.read.file", "file" , base.DEC);
proto.fields.fs_read_offset = ProtoField.uint64("resea.payloads.fs.read.offset", "offset" , base.HEX);
proto.fields.fs_read_len = ProtoField.uint64("resea.payloads.fs.read.len", "len" , base.HEX);
proto.fields.fs_write_file = ProtoField.int32("resea.payloads.fs.write.file", "file" , base.DEC);
proto.fields.fs_write_len = ProtoField.uint64("resea.payloads.fs.write.len", "len" , base.HEX);
proto.fields.net_tcp_close_sock = ProtoField.int32("resea.payloads.net.tcp_close.sock", "sock" , base.DEC);
proto.fields.net_tcp_listen_port = ProtoField.uint16("resea.payloads.net.tcp_listen.port", "port" , base.DEC);
proto.fields.net_tcp_write_sock = ProtoField.int32("resea.payloads.net.tcp_write.sock", "sock" , base.DEC);
proto.fields.net_client_tcp_received_client_sock = ProtoField.int32("resea.payloads.net_client.tcp_received.client_sock", "client_sock" , base.DEC);
proto.fields.net_client_tcp_accepted_listen_sock = ProtoField.int32("resea.payloads.net_client.tcp_accepted.listen_sock", "listen_sock" , base.DEC);
proto.fields.net_client_tcp_accepted_client_sock = ProtoField.int32("resea.payloads.net_client.tcp_accepted.client_sock", "client_sock" , base.DEC);
proto.fields.storage_device_read_sector = ProtoField.uint64("resea.payloads.storage_device.read.sector", "sector" , base.HEX);
proto.fields.storage_device_read_num_sectors = ProtoField.uint64("resea.payloads.storage_device.read.num_sectors", "num_sectors" , base.HEX);
proto.fields.text_screen_device_print_str_str = ProtoField.string("resea.payloads.text_screen_device.print_str.str", "str" );
proto.fields.text_screen_device_print_char_ch = ProtoField.string("resea.payloads.text_screen_device.print_char.ch", "ch" );
proto.fields.keyboard_device_client_pressed_ch = ProtoField.string("resea.payloads.keyboard_device_client.pressed.ch", "ch" );

resea_messages = {

    [0x101] = {
        interface_name = "notification",
        name = "notification.notification",
        fields = {
        }
    },

    [0x181] = {
        interface_name = "notification",
        name = "notification.notification_reply",
        fields = {
        }
    },

    [0x201] = {
        interface_name = "runtime",
        name = "runtime.exit",
        fields = {
            { name="code", proto=proto.fields.runtime_exit_code, offset=32, len=4 },
        }
    },

    [0x281] = {
        interface_name = "runtime",
        name = "runtime.exit_reply",
        fields = {
        }
    },

    [0x202] = {
        interface_name = "runtime",
        name = "runtime.printchar",
        fields = {
            { name="ch", proto=proto.fields.runtime_printchar_ch, offset=32, len=1 },
        }
    },

    [0x282] = {
        interface_name = "runtime",
        name = "runtime.printchar_reply",
        fields = {
        }
    },

    [0x203] = {
        interface_name = "runtime",
        name = "runtime.print_str",
        fields = {
            { name="str", proto=proto.fields.runtime_print_str_str, offset=32, len=128 },
        }
    },

    [0x283] = {
        interface_name = "runtime",
        name = "runtime.print_str_reply",
        fields = {
        }
    },

    [0x301] = {
        interface_name = "server",
        name = "server.connect",
        fields = {
            { name="interface", proto=proto.fields.server_connect_interface, offset=32, len=1 },
        }
    },

    [0x381] = {
        interface_name = "server",
        name = "server.connect_reply",
        fields = {
            { name="interface", proto=proto.fields.server_connect_reply_interface, offset=33, len=1 },
        }
    },

    [0x401] = {
        interface_name = "pager",
        name = "pager.fill",
        fields = {
            { name="proc", proto=proto.fields.pager_fill_proc, offset=32, len=4 },
            { name="addr", proto=proto.fields.pager_fill_addr, offset=36, len=8 },
            { name="num_pages", proto=proto.fields.pager_fill_num_pages, offset=44, len=8 },
        }
    },

    [0x481] = {
        interface_name = "pager",
        name = "pager.fill_reply",
        fields = {
        }
    },

    [0x501] = {
        interface_name = "timer",
        name = "timer.create",
        fields = {
            { name="initial", proto=proto.fields.timer_create_initial, offset=32, len=4 },
            { name="interval", proto=proto.fields.timer_create_interval, offset=36, len=4 },
        }
    },

    [0x581] = {
        interface_name = "timer",
        name = "timer.create_reply",
        fields = {
            { name="timer", proto=proto.fields.timer_create_reply_timer, offset=40, len=4 },
        }
    },

    [0x502] = {
        interface_name = "timer",
        name = "timer.reset",
        fields = {
            { name="timer", proto=proto.fields.timer_reset_timer, offset=32, len=4 },
            { name="initial", proto=proto.fields.timer_reset_initial, offset=36, len=4 },
            { name="interval", proto=proto.fields.timer_reset_interval, offset=40, len=4 },
        }
    },

    [0x582] = {
        interface_name = "timer",
        name = "timer.reset_reply",
        fields = {
        }
    },

    [0x503] = {
        interface_name = "timer",
        name = "timer.clear",
        fields = {
            { name="timer", proto=proto.fields.timer_clear_timer, offset=32, len=4 },
        }
    },

    [0x583] = {
        interface_name = "timer",
        name = "timer.clear_reply",
        fields = {
        }
    },

    [0xa01] = {
        interface_name = "kernel",
        name = "kernel.create_process",
        fields = {
            { name="name", proto=proto.fields.kernel_create_process_name, offset=32, len=128 },
        }
    },

    [0xa81] = {
        interface_name = "kernel",
        name = "kernel.create_process_reply",
        fields = {
            { name="proc", proto=proto.fields.kernel_create_process_reply_proc, offset=160, len=4 },
        }
    },

    [0xa02] = {
        interface_name = "kernel",
        name = "kernel.destroy_process",
        fields = {
            { name="proc", proto=proto.fields.kernel_destroy_process_proc, offset=32, len=4 },
        }
    },

    [0xa82] = {
        interface_name = "kernel",
        name = "kernel.destroy_process_reply",
        fields = {
        }
    },

    [0xa03] = {
        interface_name = "kernel",
        name = "kernel.add_vm_area",
        fields = {
            { name="proc", proto=proto.fields.kernel_add_vm_area_proc, offset=32, len=4 },
            { name="start", proto=proto.fields.kernel_add_vm_area_start, offset=36, len=8 },
            { name="size", proto=proto.fields.kernel_add_vm_area_size, offset=44, len=8 },
            { name="flags", proto=proto.fields.kernel_add_vm_area_flags, offset=52, len=1 },
        }
    },

    [0xa83] = {
        interface_name = "kernel",
        name = "kernel.add_vm_area_reply",
        fields = {
        }
    },

    [0xa04] = {
        interface_name = "kernel",
        name = "kernel.inject_channel",
        fields = {
            { name="proc", proto=proto.fields.kernel_inject_channel_proc, offset=32, len=4 },
        }
    },

    [0xa84] = {
        interface_name = "kernel",
        name = "kernel.inject_channel_reply",
        fields = {
        }
    },

    [0xa05] = {
        interface_name = "kernel",
        name = "kernel.spawn_thread",
        fields = {
            { name="proc", proto=proto.fields.kernel_spawn_thread_proc, offset=32, len=4 },
            { name="start", proto=proto.fields.kernel_spawn_thread_start, offset=36, len=8 },
            { name="stack", proto=proto.fields.kernel_spawn_thread_stack, offset=44, len=8 },
            { name="buffer", proto=proto.fields.kernel_spawn_thread_buffer, offset=52, len=8 },
            { name="arg", proto=proto.fields.kernel_spawn_thread_arg, offset=60, len=8 },
        }
    },

    [0xa85] = {
        interface_name = "kernel",
        name = "kernel.spawn_thread_reply",
        fields = {
            { name="thread", proto=proto.fields.kernel_spawn_thread_reply_thread, offset=68, len=4 },
        }
    },

    [0xa06] = {
        interface_name = "kernel",
        name = "kernel.destroy_thread",
        fields = {
            { name="thread", proto=proto.fields.kernel_destroy_thread_thread, offset=32, len=4 },
        }
    },

    [0xa86] = {
        interface_name = "kernel",
        name = "kernel.destroy_thread_reply",
        fields = {
        }
    },

    [0xa07] = {
        interface_name = "kernel",
        name = "kernel.listen_irq",
        fields = {
            { name="irq", proto=proto.fields.kernel_listen_irq_irq, offset=32, len=1 },
        }
    },

    [0xa87] = {
        interface_name = "kernel",
        name = "kernel.listen_irq_reply",
        fields = {
        }
    },

    [0xa08] = {
        interface_name = "kernel",
        name = "kernel.read_ioport",
        fields = {
            { name="addr", proto=proto.fields.kernel_read_ioport_addr, offset=32, len=8 },
            { name="size", proto=proto.fields.kernel_read_ioport_size, offset=40, len=8 },
        }
    },

    [0xa88] = {
        interface_name = "kernel",
        name = "kernel.read_ioport_reply",
        fields = {
            { name="data", proto=proto.fields.kernel_read_ioport_reply_data, offset=48, len=8 },
        }
    },

    [0xa09] = {
        interface_name = "kernel",
        name = "kernel.write_ioport",
        fields = {
            { name="addr", proto=proto.fields.kernel_write_ioport_addr, offset=32, len=8 },
            { name="size", proto=proto.fields.kernel_write_ioport_size, offset=40, len=8 },
            { name="data", proto=proto.fields.kernel_write_ioport_data, offset=48, len=8 },
        }
    },

    [0xa89] = {
        interface_name = "kernel",
        name = "kernel.write_ioport_reply",
        fields = {
        }
    },

    [0xa0a] = {
        interface_name = "kernel",
        name = "kernel.batch_write_ioport",
        fields = {
            { name="addr1", proto=proto.fields.kernel_batch_write_ioport_addr1, offset=32, len=8 },
            { name="size1", proto=proto.fields.kernel_batch_write_ioport_size1, offset=40, len=8 },
            { name="data1", proto=proto.fields.kernel_batch_write_ioport_data1, offset=48, len=8 },
            { name="addr2", proto=proto.fields.kernel_batch_write_ioport_addr2, offset=56, len=8 },
            { name="size2", proto=proto.fields.kernel_batch_write_ioport_size2, offset=64, len=8 },
            { name="data2", proto=proto.fields.kernel_batch_write_ioport_data2, offset=72, len=8 },
            { name="addr3", proto=proto.fields.kernel_batch_write_ioport_addr3, offset=80, len=8 },
            { name="size3", proto=proto.fields.kernel_batch_write_ioport_size3, offset=88, len=8 },
            { name="data3", proto=proto.fields.kernel_batch_write_ioport_data3, offset=96, len=8 },
            { name="addr4", proto=proto.fields.kernel_batch_write_ioport_addr4, offset=104, len=8 },
            { name="size4", proto=proto.fields.kernel_batch_write_ioport_size4, offset=112, len=8 },
            { name="data4", proto=proto.fields.kernel_batch_write_ioport_data4, offset=120, len=8 },
        }
    },

    [0xa8a] = {
        interface_name = "kernel",
        name = "kernel.batch_write_ioport_reply",
        fields = {
        }
    },

    [0xa0b] = {
        interface_name = "kernel",
        name = "kernel.get_screen_buffer",
        fields = {
        }
    },

    [0xa8b] = {
        interface_name = "kernel",
        name = "kernel.get_screen_buffer_reply",
        fields = {
        }
    },

    [0xa0c] = {
        interface_name = "kernel",
        name = "kernel.read_kernel_log",
        fields = {
        }
    },

    [0xa8c] = {
        interface_name = "kernel",
        name = "kernel.read_kernel_log_reply",
        fields = {
            { name="str", proto=proto.fields.kernel_read_kernel_log_reply_str, offset=32, len=128 },
        }
    },

    [0xb01] = {
        interface_name = "memmgr",
        name = "memmgr.alloc_pages",
        fields = {
            { name="num_pages", proto=proto.fields.memmgr_alloc_pages_num_pages, offset=32, len=8 },
        }
    },

    [0xb81] = {
        interface_name = "memmgr",
        name = "memmgr.alloc_pages_reply",
        fields = {
        }
    },

    [0xb02] = {
        interface_name = "memmgr",
        name = "memmgr.alloc_phy_pages",
        fields = {
            { name="num_pages", proto=proto.fields.memmgr_alloc_phy_pages_num_pages, offset=32, len=8 },
        }
    },

    [0xb82] = {
        interface_name = "memmgr",
        name = "memmgr.alloc_phy_pages_reply",
        fields = {
            { name="paddr", proto=proto.fields.memmgr_alloc_phy_pages_reply_paddr, offset=40, len=8 },
        }
    },

    [0xb03] = {
        interface_name = "memmgr",
        name = "memmgr.map_phy_pages",
        fields = {
            { name="paddr", proto=proto.fields.memmgr_map_phy_pages_paddr, offset=32, len=8 },
            { name="num_pages", proto=proto.fields.memmgr_map_phy_pages_num_pages, offset=40, len=8 },
        }
    },

    [0xb83] = {
        interface_name = "memmgr",
        name = "memmgr.map_phy_pages_reply",
        fields = {
        }
    },

    [0xc01] = {
        interface_name = "discovery",
        name = "discovery.connect",
        fields = {
            { name="interface", proto=proto.fields.discovery_connect_interface, offset=32, len=1 },
        }
    },

    [0xc81] = {
        interface_name = "discovery",
        name = "discovery.connect_reply",
        fields = {
        }
    },

    [0xc02] = {
        interface_name = "discovery",
        name = "discovery.publish",
        fields = {
            { name="interface", proto=proto.fields.discovery_publish_interface, offset=32, len=1 },
        }
    },

    [0xc82] = {
        interface_name = "discovery",
        name = "discovery.publish_reply",
        fields = {
        }
    },

    [0xd01] = {
        interface_name = "fs",
        name = "fs.open",
        fields = {
            { name="path", proto=proto.fields.fs_open_path, offset=32, len=128 },
        }
    },

    [0xd81] = {
        interface_name = "fs",
        name = "fs.open_reply",
        fields = {
            { name="file", proto=proto.fields.fs_open_reply_file, offset=160, len=4 },
        }
    },

    [0xd02] = {
        interface_name = "fs",
        name = "fs.close",
        fields = {
            { name="handle", proto=proto.fields.fs_close_handle, offset=32, len=4 },
        }
    },

    [0xd82] = {
        interface_name = "fs",
        name = "fs.close_reply",
        fields = {
        }
    },

    [0xd03] = {
        interface_name = "fs",
        name = "fs.read",
        fields = {
            { name="file", proto=proto.fields.fs_read_file, offset=32, len=4 },
            { name="offset", proto=proto.fields.fs_read_offset, offset=36, len=8 },
            { name="len", proto=proto.fields.fs_read_len, offset=44, len=8 },
        }
    },

    [0xd83] = {
        interface_name = "fs",
        name = "fs.read_reply",
        fields = {
        }
    },

    [0xd04] = {
        interface_name = "fs",
        name = "fs.write",
        fields = {
            { name="file", proto=proto.fields.fs_write_file, offset=32, len=4 },
            { name="len", proto=proto.fields.fs_write_len, offset=36, len=8 },
        }
    },

    [0xd84] = {
        interface_name = "fs",
        name = "fs.write_reply",
        fields = {
        }
    },

    [0xe01] = {
        interface_name = "net",
        name = "net.tcp_close",
        fields = {
            { name="sock", proto=proto.fields.net_tcp_close_sock, offset=32, len=4 },
        }
    },

    [0xe81] = {
        interface_name = "net",
        name = "net.tcp_close_reply",
        fields = {
        }
    },

    [0xe02] = {
        interface_name = "net",
        name = "net.tcp_listen",
        fields = {
            { name="port", proto=proto.fields.net_tcp_listen_port, offset=32, len=2 },
        }
    },

    [0xe82] = {
        interface_name = "net",
        name = "net.tcp_listen_reply",
        fields = {
            { name="sock", proto=proto.fields.net_tcp_listen_reply_sock, offset=34, len=4 },
        }
    },

    [0xe03] = {
        interface_name = "net",
        name = "net.tcp_write",
        fields = {
            { name="sock", proto=proto.fields.net_tcp_write_sock, offset=32, len=4 },
        }
    },

    [0xe83] = {
        interface_name = "net",
        name = "net.tcp_write_reply",
        fields = {
        }
    },

    [0xf01] = {
        interface_name = "net_client",
        name = "net_client.tcp_received",
        fields = {
            { name="client_sock", proto=proto.fields.net_client_tcp_received_client_sock, offset=32, len=4 },
        }
    },

    [0xf02] = {
        interface_name = "net_client",
        name = "net_client.tcp_accepted",
        fields = {
            { name="listen_sock", proto=proto.fields.net_client_tcp_accepted_listen_sock, offset=32, len=4 },
            { name="client_sock", proto=proto.fields.net_client_tcp_accepted_client_sock, offset=36, len=4 },
        }
    },

    [0x1e01] = {
        interface_name = "storage_device",
        name = "storage_device.read",
        fields = {
            { name="sector", proto=proto.fields.storage_device_read_sector, offset=32, len=8 },
            { name="num_sectors", proto=proto.fields.storage_device_read_num_sectors, offset=40, len=8 },
        }
    },

    [0x1e81] = {
        interface_name = "storage_device",
        name = "storage_device.read_reply",
        fields = {
        }
    },

    [0x1f01] = {
        interface_name = "network_device",
        name = "network_device.get_macaddr",
        fields = {
        }
    },

    [0x1f81] = {
        interface_name = "network_device",
        name = "network_device.get_macaddr_reply",
        fields = {
            { name="addr0", proto=proto.fields.network_device_get_macaddr_reply_addr0, offset=32, len=1 },
            { name="addr1", proto=proto.fields.network_device_get_macaddr_reply_addr1, offset=33, len=1 },
            { name="addr2", proto=proto.fields.network_device_get_macaddr_reply_addr2, offset=34, len=1 },
            { name="addr3", proto=proto.fields.network_device_get_macaddr_reply_addr3, offset=35, len=1 },
            { name="addr4", proto=proto.fields.network_device_get_macaddr_reply_addr4, offset=36, len=1 },
            { name="addr5", proto=proto.fields.network_device_get_macaddr_reply_addr5, offset=37, len=1 },
        }
    },

    [0x1f02] = {
        interface_name = "network_device",
        name = "network_device.listen",
        fields = {
        }
    },

    [0x1f82] = {
        interface_name = "network_device",
        name = "network_device.listen_reply",
        fields = {
        }
    },

    [0x1f03] = {
        interface_name = "network_device",
        name = "network_device.transmit",
        fields = {
        }
    },

    [0x1f83] = {
        interface_name = "network_device",
        name = "network_device.transmit_reply",
        fields = {
        }
    },

    [0x2001] = {
        interface_name = "network_device_client",
        name = "network_device_client.received",
        fields = {
        }
    },

    [0x2101] = {
        interface_name = "text_screen_device",
        name = "text_screen_device.print_str",
        fields = {
            { name="str", proto=proto.fields.text_screen_device_print_str_str, offset=32, len=128 },
        }
    },

    [0x2181] = {
        interface_name = "text_screen_device",
        name = "text_screen_device.print_str_reply",
        fields = {
        }
    },

    [0x2102] = {
        interface_name = "text_screen_device",
        name = "text_screen_device.print_char",
        fields = {
            { name="ch", proto=proto.fields.text_screen_device_print_char_ch, offset=32, len=1 },
        }
    },

    [0x2182] = {
        interface_name = "text_screen_device",
        name = "text_screen_device.print_char_reply",
        fields = {
        }
    },

    [0x2201] = {
        interface_name = "keyboard_device",
        name = "keyboard_device.listen",
        fields = {
        }
    },

    [0x2281] = {
        interface_name = "keyboard_device",
        name = "keyboard_device.listen_reply",
        fields = {
        }
    },

    [0x2301] = {
        interface_name = "keyboard_device_client",
        name = "keyboard_device_client.pressed",
        fields = {
            { name="ch", proto=proto.fields.keyboard_device_client_pressed_ch, offset=32, len=1 },
        }
    },
}
