--
--  The Wireshark dissector for Resea IPC messages.
--
--  Setup:
--
--    1. Install Wireshark
--    2. Install this dissector (in macOS, copy this file to ~/.config/wireshark/plugins/)
--    3. Open Prefrences > Protocols > DLT_USER > Encapsulations Table
--    4. Add a new rule: DLT="User 0 (DLT=147)", Payload protocol="resea", Header/Trailer size=0
--       (see https://wiki.wireshark.org/HowToDissectAnything)
--
--  How to use:
--
--    $ make run | grep "pcap>" > messages.log
--    $ text2pcap -l 147 messages.log messages.pcap
--    $ wireshark messages.pcap
--
proto = Proto("resea", "Resea IPC Messages")

function main()
    local optional_payloads = { [0] = "Not included", [1] = "Included" }

    proto.fields.inline_len = 
        ProtoField.uint8("resea.inline_len", "Inline Payload Length", base.DEC)
    proto.fields.interface = 
        ProtoField.uint8("resea.interface", "Interface ID", base.DEC)
    proto.fields.message_type = 
        ProtoField.uint16("resea.message_type", "Message Type", base.HEX,
            message_types)
    proto.fields.page_included = 
        ProtoField.uint8("resea.page_included", "Page Payload", base.HEX,
            optional_payloads, 0x08)
    proto.fields.channel_included = 
        ProtoField.uint8("resea.channel_included", "Channel Payload", base.HEX,
            optional_payloads, 0x10)

    function proto.dissector(buffer, pinfo, tree)
        local message_type = buffer(2, 2):le_uint()
        local message = resea_messages[message_type]
        pinfo.cols.protocol = "Resea"
        pinfo.cols.info = message["name"]
        subtree = tree:add(proto, buffer(), message)

        --
        --  Message Header
        --
        local inline_len = buffer(0, 1):uint()
        header = subtree:add(buffer(0, 4), "Header")
        header:add(proto.fields.interface, buffer(3, 1))
        header:add(proto.fields.message_type,  buffer(2, 2))
        header:add(proto.fields.inline_len, inline_len)
        header:add(proto.fields.page_included, buffer(1, 1))
        header:add(proto.fields.channel_included, buffer(1, 1))
        
        --
        --  Payloads
        --
        fields = subtree:add(buffer(5), "Payloads")
        for _, field in ipairs(message["fields"]) do
            fields:add(field["proto"], buffer(field["offset"], field["len"]))
        end


        --
        --  Set colors
        --
        set_color_filter_slot(10, "resea.interface == 1") -- runtime
    end

    wtap_encap = DissectorTable.get("wtap_encap")
    wtap_encap:add(wtap.USER0, proto)
end

main()

-- -----------------------------------------------------------------------------
-- Message definitions generated by generate-wireshark-dissector-data.py
--

proto.fields.runtime_exit_code = ProtoField.int32("resea.payloads.runtime.exit.code", "code");
proto.fields.runtime_printchar_ch = ProtoField.string("resea.payloads.runtime.printchar.ch", "ch");

resea_messages = {
    [0x101] = {
        interface_name = "runtime",
        name = "runtime.exit",
        fields = {
            { name="code", proto=proto.fields.runtime_exit_code, offset=32, len=4 },
        }
    },
    [0x102] = {
        interface_name = "runtime",
        name = "runtime.printchar",
        fields = {
            { name="ch", proto=proto.fields.runtime_printchar_ch, offset=32, len=1 },
        }
    },
}
