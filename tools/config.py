#!/usr/bin/env python3
import argparse
import defconfig
import menuconfig
import kconfiglib
import re
import platform
import os
import sys
from glob import glob
from pathlib import Path

def setdefaults():
    # Search for toolchains.
    llvm_prefix = ""
    grub_prefix = ""
    if platform.system() == "Darwin":
        grub_prefix += "/usr/local/opt/i386-elf-grub/bin/i386-elf-"
        llvm_prefix = "/usr/local/opt/llvm/bin/"

    # Use newer toolchain if possible (installed via apt.llvm.org).
    if os.path.exists("/usr/lib/llvm-9/bin"):
        llvm_prefix = "/usr/lib/llvm-9/bin/"
    elif os.path.exists("/usr/lib/llvm-8/bin"):
        llvm_prefix = "/usr/lib/llvm-8/bin/"

    os.environ["DEFAULT_LLVM_PREFIX"] = llvm_prefix
    os.environ["DEFAULT_GRUB_PREFIX"] = grub_prefix

def defconfig(config_file):
    if os.path.exists(config_file):
        os.remove(config_file)
    kconf = kconfiglib.Kconfig("Kconfig")
    kconf.load_config()
    kconf.write_config()

    generate_mk(config_file)

def parse_config(config):
    servers = []
    autostarts = []
    for server in glob("servers/*"):
        name = Path(server).name
        if f"CONFIG_{name.upper()}_SERVER=y" in config:
            servers.append(name)
        if f"CONFIG_AUTOSTART_{name.upper()}=y" in config:
            autostarts.append(name)

    dic = {}
    for line in config.splitlines():
        m = re.match(r"^CONFIG_([^=]+)=(.*)$", line)
        if m:
            key = m.groups()[0]
            value = m.groups()[1]
            dic[key] = value

    # XXX:
    if "CONFIG_ARCH_X64=y" in config:
        dic["ARCH"] = '"x64"'
    if "CONFIG_BUILD_RELEASE=y" in config:
        dic["BUILD"] = '"release"'
    else:
        dic["BUILD"] = '"debug"'

    dic["SERVERS"] = '"' + " ".join(servers) + '"'
    dic["AUTOSTARTS"] = '"' + " ".join(autostarts) + '"'
    return dic

def generate_mk(config_file):
    vars_for_make = [
        "ARCH", "BUILD", "BUILD_DIR", "LLVM_PREFIX", "LLVM_SUFFIX",
        "GRUB_PREFIX", "BOOTSTRAP", "SERVERS",
    ]
    config_mk = ""
    for k,v in parse_config(open(config_file).read()).items():
        prefix = "CONFIG_" if k not in vars_for_make else ""
        v = v.strip('"')
        config_mk += f"{prefix}{k} := {v}\n"
    open(config_file + ".mk", "w").write(config_mk)

def generate_h(config_file, outfile):
    config_h = ""
    config_h += "#ifndef __BUILD_CONFIG_H__\n"
    config_h += "#define __BUILD_CONFIG_H__\n"
    config_h += "//\n"
    config_h += "//  Generated by tools/config.py. Do not edit manually!\n"
    config_h += "//\n"
    for k,v in parse_config(open(config_file).read()).items():
        config_h += f"#define CONFIG_{k} {v}\n"
    config_h += "#endif\n"
    open(outfile, "w").write(config_h)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--menuconfig", action="store_true")
    parser.add_argument("--default", action="store_true")
    parser.add_argument("--generate", metavar="OUTFILE")
    parser.add_argument("--config-file", default=".config")
    args = parser.parse_args()

    setdefaults()
    if args.menuconfig:
        sys.argv = sys.argv[:1]
        menuconfig._main()
        generate_mk(args.config_file)
    elif args.default:
        defconfig(args.config_file)
    elif args.generate:
        generate_h(args.config_file, args.generate)

if __name__ == "__main__":
    main()
